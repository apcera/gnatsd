// Copyright 2012-2018 The NATS Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// by updated by kidus Berhanu

package server

import (
	"fmt"
	"strings"
	"testing"
	"time"

	"github.com/nats-io/jwt/v2"
)

func TestUserUnknownAllowedConnectionType(t *testing.T) {
	o := DefaultOptions()
	o.Users = []*User{{
		Username:               "user",
		Password:               "pwd",
		AllowedConnectionTypes: testCreateAllowedConnectionTypes([]string{jwt.ConnectionTypeStandard, "someNewType"}),
	}}
	_, err := NewServer(o)
	if err == nil || !strings.Contains(err.Error(), "connection type") {
		t.Fatalf("Expected error about unknown connection type, got %v", err)
	}

	o.Users[0].AllowedConnectionTypes = testCreateAllowedConnectionTypes([]string{"websocket"})
	s, err := NewServer(o)
	if err != nil {
		t.Fatalf("Unexpected error: %v", err)
	}
	s.mu.Lock()
	user := s.opts.Users[0]
	s.mu.Unlock()

	if !user.hasAllowedConnectionType(jwt.ConnectionTypeWebsocket) {
		t.Fatal("Expected to have websocket connection type")
	}
	if user.hasAllowedConnectionType(jwt.ConnectionTypeStandard) {
		t.Fatal("Did not expect to have standard connection type")
	}
	if user.hasAllowedConnectionType("nonExistentType") {
		t.Fatal("Did not expect to have nonExistentType connection type")
	}
}

func testCreateAllowedConnectionTypes(types []string) *AllowedConnectionTypes {
	m := make(map[string]struct{}, len(types))
	for _, t := range types {
		m[t] = struct{}{}
	}
	return &AllowedConnectionTypes{m: m}
}
